import 'dart:convert'; // For base64Encode
import 'dart:typed_data'; // For Uint8List
import 'package:flutter/material.dart';
import 'package:file_picker/file_picker.dart';
import 'package:cloud_functions/cloud_functions.dart';
import 'package:firebase_core/firebase_core.dart'; // Required for Firebase.initializeApp()

// You might want to put your FirebaseOptions in a separate file or configure them
// based on your project setup (e.g., firebase_options.dart generated by FlutterFire CLI)
// For this example, ensure Firebase is initialized before running the app.
// Example:
// void main() async {
//   WidgetsFlutterBinding.ensureInitialized();
//   await Firebase.initializeApp(
//     options: DefaultFirebaseOptions.currentPlatform, // If you use FlutterFire CLI
//   );
//   runApp(MyApp());
// }

class DocumentIngestionPage extends StatefulWidget {
  const DocumentIngestionPage({super.key});

  @override
  State<DocumentIngestionPage> createState() => _DocumentIngestionPageState();
}

class _DocumentIngestionPageState extends State<DocumentIngestionPage> {
  String? _fileName;
  Uint8List? _fileBytes;
  bool _isLoading = false;
  String _statusMessage = '';

  Future<void> _pickDocument() async {
    setState(() {
      _isLoading = true;
      _statusMessage = 'Picking document...';
      _fileName = null;
      _fileBytes = null;
    });

    try {
      FilePickerResult? result = await FilePicker.platform.pickFiles(
        type: FileType.custom,
        allowedExtensions: ['pdf', 'txt'], // Customize as needed
      );

      if (result != null && result.files.single.bytes != null) {
        setState(() {
          _fileName = result.files.single.name;
          _fileBytes = result.files.single.bytes;
          _statusMessage = 'File selected: $_fileName';
        });
      } else {
        // User canceled the picker or file bytes are null
        setState(() {
          _statusMessage = 'No file selected or file is empty.';
        });
      }
    } catch (e) {
      setState(() {
        _statusMessage = 'Error picking file: $e';
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _ingestDocument() async {
    if (_fileBytes == null || _fileName == null) {
      setState(() {
        _statusMessage = 'Please select a document first.';
      });
      return;
    }

    setState(() {
      _isLoading = true;
      _statusMessage = 'Ingesting document: $_fileName...';
    });

    try {

      FirebaseFunctions functions = FirebaseFunctions.instance;
      // If you are using a non-default region for your functions:
      // FirebaseFunctions functions = FirebaseFunctions.instanceFor(region: 'your-region');

      final HttpsCallable callable = functions.httpsCallable('ingestDocument'); // Name of your deployed function

      final String base64FileContent = base64Encode(_fileBytes!);

      final HttpsCallableResult result = await callable.call(<String, dynamic>{
        'fileContent': base64FileContent,
        'fileName': _fileName,
      });

      setState(() {
        _statusMessage = 'Success: ${result.data['message']}';
        // Optionally clear the selection
        // _fileName = null;
        // _fileBytes = null;
      });
    } on FirebaseFunctionsException catch (e) {
      print('Firebase Functions Exception:');
      print('Code: ${e.code}');
      print('Message: ${e.message}');
      print('Details: ${e.details}');
      setState(() {
        _statusMessage = 'Error ingesting document (Firebase): ${e.message}';
      });
    } catch (e) {
      print('Generic Exception: $e');
      setState(() {
        _statusMessage = 'Error ingesting document: $e';
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Ingest Document'),
      ),
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              if (_fileName != null)
                Padding(
                  padding: const EdgeInsets.only(bottom: 16.0),
                  child: Text('Selected: $_fileName'),
                ),
              ElevatedButton.icon(
                icon: const Icon(Icons.attach_file),
                label: const Text('Pick Document'),
                onPressed: _isLoading ? null : _pickDocument,
              ),
              const SizedBox(height: 20),
              if (_fileBytes != null)
                ElevatedButton.icon(
                  icon: const Icon(Icons.cloud_upload),
                  label: const Text('Ingest Document'),
                  onPressed: _isLoading ? null : _ingestDocument,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.green, // Or your theme's primary color
                    foregroundColor: Colors.white,
                  ),
                ),
              const SizedBox(height: 20),
              if (_isLoading)
                const CircularProgressIndicator(),
              if (_statusMessage.isNotEmpty)
                Padding(
                  padding: const EdgeInsets.only(top: 16.0),
                  child: Text(
                    _statusMessage,
                    textAlign: TextAlign.center,
                  ),
                ),
            ],
          ),
        ),
      ),
    );
  }
}

// Example of how to use this page in your app:
// class MyApp extends StatelessWidget {
//   const MyApp({super.key});
//
//   @override
//   Widget build(BuildContext context) {
//     return MaterialApp(
//       title: 'Document Ingester',
//       theme: ThemeData(
//         primarySwatch: Colors.blue,
//       ),
//       home: const DocumentIngestionPage(),
//     );
//   }
// }
    